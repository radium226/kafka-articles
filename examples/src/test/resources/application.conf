akka.kafka.producer {
  parallelism = 100

  close-timeout = 60s

  use-dispatcher = "akka.kafka.default-dispatcher"

  kafka-clients {
    bootstrap.servers = "localhost:9092"
    bootstrap.servers = ${?KAFKA_BOOTSTRAP_SERVERS}

    acks = "all"
    retries = 0
    batch.size = 16384
  }

  kafka-avro-serializer {
    schema.registry.url = "http://localhost:8081"
    schema.registry.url = ${?SCHEMA_REGISTRY_URL}
    auto.register.schemas = false
    key.subject.name.strategy = "io.confluent.kafka.serializers.subject.TopicNameStrategy"
    value.subject.name.strategy = "io.confluent.kafka.serializers.subject.RecordNameStrategy"
  }
}

kafka-clients {
  bootstrap.servers = "localhost:9092"
  bootstrap.servers = ${?KAFKA_BOOTSTRAP_SERVERS}

  acks = "all"
  retries = 0
  batch.size = 16384

  enable.auto.commit = false
}

akka.kafka.consumer {
  parallelism = 100

  close-timeout = 60s

  use-dispatcher = "akka.kafka.default-dispatcher"

  kafka-clients {
    group.id = "examples"
    enable.auto.commit = false
    auto.offset.reset = "earliest"
    bootstrap.servers = "localhost:9092"
    bootstrap.servers = ${?KAFKA_BOOTSTRAP_SERVERS}
  }

  kafka-avro-deserializer {
    schema.registry.url = "http://localhost:8081"
    schema.registry.url = ${?SCHEMA_REGISTRY_URL}
    specific.avro.reader = true
    auto.register.schemas = false
    key.subject.name.strategy = "io.confluent.kafka.serializers.subject.TopicNameStrategy"
    value.subject.name.strategy = "io.confluent.kafka.serializers.subject.RecordNameStrategy"
  }

}

schema.registry.url = "http://localhost:8081"
schema.registry.url = ${?SCHEMA_REGISTRY_URL}

zookeeperConnect = "localhost:2181"
zookeeperConnect = ${?ZOOKEEPER_CONNECT}